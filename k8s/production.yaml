# Namespace pour FacturX
apiVersion: v1
kind: Namespace
metadata:
  name: facturx
  labels:
    name: facturx
    environment: production

---
# ConfigMap pour les variables d'environnement
apiVersion: v1
kind: ConfigMap
metadata:
  name: facturx-config
  namespace: facturx
data:
  APP_NAME: "FacturX"
  APP_ENV: "production"
  APP_DEBUG: "false"
  LOG_CHANNEL: "stack"
  LOG_LEVEL: "error"
  
  DB_CONNECTION: "pgsql"
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_DATABASE: "facturx_production"
  
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  
  CACHE_DRIVER: "redis"
  SESSION_DRIVER: "redis"
  QUEUE_CONNECTION: "redis"
  
  MAIL_MAILER: "smtp"
  MAIL_PORT: "587"
  MAIL_ENCRYPTION: "tls"
  
  FILESYSTEM_DISK: "s3"
  AWS_DEFAULT_REGION: "eu-west-3"
  
  PPF_ENVIRONMENT: "production"
  PDP_TEST_MODE: "false"
  
  OCTANE_SERVER: "swoole"
  OCTANE_WORKERS: "auto"

---
# Secret pour les données sensibles
apiVersion: v1
kind: Secret
metadata:
  name: facturx-secrets
  namespace: facturx
type: Opaque
stringData:
  APP_KEY: "base64:YOUR_APP_KEY_HERE"
  DB_USERNAME: "facturx_prod"
  DB_PASSWORD: "YOUR_DB_PASSWORD"
  REDIS_PASSWORD: "YOUR_REDIS_PASSWORD"
  MAIL_HOST: "smtp.example.com"
  MAIL_USERNAME: "noreply@facturx.com"
  MAIL_PASSWORD: "YOUR_MAIL_PASSWORD"
  AWS_ACCESS_KEY_ID: "YOUR_AWS_ACCESS_KEY"
  AWS_SECRET_ACCESS_KEY: "YOUR_AWS_SECRET_KEY"
  AWS_BUCKET: "facturx-storage"
  PPF_API_KEY: "YOUR_PPF_API_KEY"
  STRIPE_SECRET_KEY: "YOUR_STRIPE_SECRET_KEY"
  SENTRY_DSN: "YOUR_SENTRY_DSN"

---
# Deployment pour l'application principale
apiVersion: apps/v1
kind: Deployment
metadata:
  name: facturx-app
  namespace: facturx
  labels:
    app: facturx-app
    tier: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: facturx-app
      tier: frontend
  template:
    metadata:
      labels:
        app: facturx-app
        tier: frontend
    spec:
      containers:
      - name: facturx
        image: ghcr.io/your-username/facturx:latest
        ports:
        - containerPort: 9000
          name: php-fpm
        envFrom:
        - configMapRef:
            name: facturx-config
        - secretRef:
            name: facturx-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - php
            - artisan
            - octane:status
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - php
            - artisan
            - octane:status
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: storage
          mountPath: /var/www/storage
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: facturx-storage-pvc

---
# Service pour l'application
apiVersion: v1
kind: Service
metadata:
  name: facturx-app-service
  namespace: facturx
  labels:
    app: facturx-app
spec:
  selector:
    app: facturx-app
    tier: frontend
  ports:
  - port: 9000
    targetPort: 9000
    protocol: TCP
    name: php-fpm
  type: ClusterIP

---
# Deployment pour Nginx
apiVersion: apps/v1
kind: Deployment
metadata:
  name: facturx-nginx
  namespace: facturx
  labels:
    app: facturx-nginx
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: facturx-nginx
      tier: frontend
  template:
    metadata:
      labels:
        app: facturx-nginx
        tier: frontend
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: app-files
          mountPath: /var/www
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: app-files
        emptyDir: {}

---
# ConfigMap pour la configuration Nginx
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: facturx
data:
  default.conf: |
    upstream php-fpm {
        server facturx-app-service:9000;
    }
    
    server {
        listen 80;
        server_name _;
        root /var/www/public;
        index index.php index.html;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_comp_level 6;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml;
        
        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }
        
        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass php-fpm;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
        }
        
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        location ~ /\.(ht|git|env) {
            deny all;
        }
    }

---
# Service pour Nginx
apiVersion: v1
kind: Service
metadata:
  name: facturx-nginx-service
  namespace: facturx
  labels:
    app: facturx-nginx
spec:
  selector:
    app: facturx-nginx
    tier: frontend
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  type: ClusterIP

---
# Deployment pour les workers de queue
apiVersion: apps/v1
kind: Deployment
metadata:
  name: facturx-queue-worker
  namespace: facturx
  labels:
    app: facturx-queue-worker
    tier: worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: facturx-queue-worker
      tier: worker
  template:
    metadata:
      labels:
        app: facturx-queue-worker
        tier: worker
    spec:
      containers:
      - name: queue-worker
        image: ghcr.io/your-username/facturx:latest-queue
        command: ["php", "artisan", "queue:work", "redis"]
        args: ["--sleep=3", "--tries=3", "--max-time=3600"]
        envFrom:
        - configMapRef:
            name: facturx-config
        - secretRef:
            name: facturx-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - php
            - artisan
            - queue:monitor
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

---
# CronJob pour le scheduler Laravel
apiVersion: batch/v1
kind: CronJob
metadata:
  name: facturx-scheduler
  namespace: facturx
spec:
  schedule: "* * * * *"  # Toutes les minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: scheduler
            image: ghcr.io/your-username/facturx:latest
            command: ["php", "artisan", "schedule:run"]
            envFrom:
            - configMapRef:
                name: facturx-config
            - secretRef:
                name: facturx-secrets
            resources:
              requests:
                memory: "128Mi"
                cpu: "50m"
              limits:
                memory: "256Mi"
                cpu: "100m"
          restartPolicy: OnFailure

---
# PVC pour le stockage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: facturx-storage-pvc
  namespace: facturx
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
# HorizontalPodAutoscaler pour l'application
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: facturx-app-hpa
  namespace: facturx
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: facturx-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Ingress pour l'exposition externe
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: facturx-ingress
  namespace: facturx
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - app.facturx.com
    secretName: facturx-tls
  rules:
  - host: app.facturx.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: facturx-nginx-service
            port:
              number: 80

---
# NetworkPolicy pour la sécurité
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: facturx-network-policy
  namespace: facturx
spec:
  podSelector:
    matchLabels:
      app: facturx-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: facturx-nginx
    ports:
    - protocol: TCP
      port: 9000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 443   # HTTPS externe
    - protocol: TCP
      port: 80    # HTTP externe
