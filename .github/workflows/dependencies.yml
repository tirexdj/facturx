name: Dependency Updates

on:
  schedule:
    # Exécute tous les lundis à 9h UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Permet l'exécution manuelle

jobs:
  # Mise à jour des dépendances Composer
  composer-updates:
    runs-on: ubuntu-latest
    name: Update Composer Dependencies

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, dom, fileinfo, pgsql, redis

    - name: Get Composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}

    - name: Update Composer dependencies
      run: |
        composer update --with-all-dependencies
        composer normalize

    - name: Check for security vulnerabilities
      run: composer audit

    - name: Create Pull Request for Composer updates
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update Composer dependencies'
        title: '🔄 Weekly Composer Dependencies Update'
        body: |
          ## 📦 Composer Dependencies Update
          
          This PR contains automatic updates for Composer dependencies.
          
          ### Changes
          - Updated PHP dependencies to latest compatible versions
          - Security audit passed
          
          ### Testing
          - [ ] All tests pass
          - [ ] No breaking changes detected
          - [ ] Security vulnerabilities resolved
          
          **Auto-generated by GitHub Actions**
        branch: feature/composer-updates
        delete-branch: true

  # Mise à jour des dépendances NPM
  npm-updates:
    runs-on: ubuntu-latest
    name: Update NPM Dependencies

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Update NPM dependencies
      run: |
        npm update
        npx npm-check-updates -u
        npm install

    - name: Check for security vulnerabilities
      run: npm audit

    - name: Run tests
      run: npm run test

    - name: Build assets
      run: npm run build

    - name: Create Pull Request for NPM updates
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update NPM dependencies'
        title: '🔄 Weekly NPM Dependencies Update'
        body: |
          ## 📦 NPM Dependencies Update
          
          This PR contains automatic updates for NPM dependencies.
          
          ### Changes
          - Updated JavaScript dependencies to latest compatible versions
          - Security audit passed
          - Build successful
          
          ### Testing
          - [ ] All tests pass
          - [ ] Build successful
          - [ ] No breaking changes detected
          - [ ] Security vulnerabilities resolved
          
          **Auto-generated by GitHub Actions**
        branch: feature/npm-updates
        delete-branch: true

  # Vérification des images Docker
  docker-updates:
    runs-on: ubuntu-latest
    name: Check Docker Image Updates

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for base image updates
      run: |
        echo "Checking for updates to base images..."
        docker pull php:8.4-fpm-alpine
        docker pull postgres:16-alpine
        docker pull redis:7-alpine
        docker pull node:20-alpine
        docker pull nginx:alpine

    - name: Create issue for Docker updates
      uses: actions/github-script@v7
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['docker-updates'],
            state: 'open'
          });

          if (issues.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🐳 Weekly Docker Images Check',
              body: `## Docker Base Images Update Check
              
              This issue is created weekly to remind about checking Docker base image updates.
              
              ### Images to check:
              - [ ] php:8.4-fmp-alpine
              - [ ] postgres:16-alpine  
              - [ ] redis:7-alpine
              - [ ] node:20-alpine
              - [ ] nginx:alpine
              
              ### Actions:
              1. Check for security updates
              2. Update Dockerfile if needed
              3. Test in development environment
              4. Update docker-compose.yml if required
              
              **Auto-generated by GitHub Actions**`,
              labels: ['docker-updates', 'maintenance']
            });
          }

  # Vérification des vulnérabilités de sécurité
  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, dom, fileinfo, pgsql, redis

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --no-dev --optimize-autoloader
        npm ci

    - name: PHP Security Audit
      run: composer audit

    - name: NPM Security Audit
      run: npm audit

    - name: Check for known vulnerabilities in Docker images
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD:/app -w /app \
          aquasec/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL \
          php:8.4-fpm-alpine || echo "Vulnerabilities found in PHP image"

    - name: Create security report
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Security Vulnerabilities Detected',
            body: `## Security Audit Report
            
            Security vulnerabilities have been detected during the automated audit.
            
            ### Actions Required:
            - [ ] Review PHP dependencies security issues
            - [ ] Review NPM dependencies security issues  
            - [ ] Review Docker base images vulnerabilities
            - [ ] Update vulnerable dependencies
            - [ ] Test updated dependencies
            
            ### Severity: HIGH
            
            Please address these issues as soon as possible.
            
            **Auto-generated by GitHub Actions Security Audit**`,
            labels: ['security', 'high-priority', 'bug']
          });

  # Vérification des licences
  license-check:
    runs-on: ubuntu-latest
    name: License Compliance Check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install dependencies
      run: |
        composer install
        npm ci

    - name: Check PHP licenses
      run: |
        composer global require franzl/studio
        composer licenses --format=json > php-licenses.json

    - name: Check NPM licenses
      run: |
        npx license-checker --json > npm-licenses.json

    - name: Analyze licenses
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Licences interdites
          const forbiddenLicenses = ['GPL', 'AGPL', 'LGPL'];
          
          let issues = [];
          
          // Vérifier les licences PHP
          try {
            const phpLicenses = JSON.parse(fs.readFileSync('php-licenses.json', 'utf8'));
            for (const [package, info] of Object.entries(phpLicenses)) {
              if (forbiddenLicenses.some(forbidden => info.license?.includes(forbidden))) {
                issues.push(`PHP package ${package}: ${info.license}`);
              }
            }
          } catch (e) {
            console.log('No PHP license file found');
          }
          
          // Vérifier les licences NPM
          try {
            const npmLicenses = JSON.parse(fs.readFileSync('npm-licenses.json', 'utf8'));
            for (const [package, info] of Object.entries(npmLicenses)) {
              if (forbiddenLicenses.some(forbidden => info.licenses?.includes(forbidden))) {
                issues.push(`NPM package ${package}: ${info.licenses}`);
              }
            }
          } catch (e) {
            console.log('No NPM license file found');
          }
          
          if (issues.length > 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚖️ License Compliance Issues',
              body: `## License Compliance Report
              
              The following packages have licensing issues:
              
              ${issues.map(issue => `- ${issue}`).join('\n')}
              
              ### Actions Required:
              - [ ] Review each package license
              - [ ] Find alternative packages if needed
              - [ ] Update dependencies
              - [ ] Verify compliance with company policy
              
              **Auto-generated by GitHub Actions License Check**`,
              labels: ['license', 'compliance', 'legal']
            });
          }

  # Nettoyage automatique
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup Old Artifacts
    needs: [composer-updates, npm-updates, security-audit]

    steps:
    - name: Cleanup old workflow runs
      uses: actions/github-script@v7
      with:
        script: |
          const { data: workflows } = await github.rest.actions.listRepoWorkflows({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          for (const workflow of workflows.workflows) {
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflow.id,
              status: 'completed',
              per_page: 100
            });
            
            // Garder seulement les 50 derniers runs
            const runsToDelete = runs.workflow_runs.slice(50);
            
            for (const run of runsToDelete) {
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
                console.log(`Deleted workflow run ${run.id}`);
              } catch (error) {
                console.log(`Failed to delete run ${run.id}: ${error.message}`);
              }
            }
          }

    - name: Cleanup old releases
      uses: actions/github-script@v7
      with:
        script: |
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          // Garder seulement les 20 dernières releases
          const releasesToDelete = releases.slice(20);
          
          for (const release of releasesToDelete) {
            if (!release.prerelease && !release.draft) {
              try {
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                console.log(`Deleted release ${release.tag_name}`);
              } catch (error) {
                console.log(`Failed to delete release ${release.tag_name}: ${error.message}`);
              }
            }
          }
