# Makefile pour FacturX
# Facilite la gestion du projet en local et en production

.PHONY: help install start stop restart logs shell test migrate seed fresh deploy

# Variables
DOCKER_COMPOSE = docker-compose
DOCKER_COMPOSE_EXEC = $(DOCKER_COMPOSE) exec app
PHP_CONTAINER = facturx_app

# Couleurs pour les messages
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[0;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

# Commande par d√©faut
help: ## Affiche cette aide
	@echo "$(BLUE)FacturX - Commandes disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'

install: ## Installation compl√®te du projet
	@echo "$(GREEN)üöÄ Installation de FacturX...$(NC)"
	@$(DOCKER_COMPOSE) build
	@$(DOCKER_COMPOSE) up -d
	@$(DOCKER_COMPOSE_EXEC) composer install
	@$(DOCKER_COMPOSE_EXEC) cp .env.example .env
	@$(DOCKER_COMPOSE_EXEC) php artisan key:generate
	@make migrate
	@make seed
	@echo "$(GREEN)‚úÖ Installation termin√©e !$(NC)"
	@echo "$(BLUE)Acc√®s: http://localhost:8000$(NC)"

start: ## D√©marre tous les services
	@echo "$(GREEN)‚ñ∂Ô∏è  D√©marrage des services...$(NC)"
	@$(DOCKER_COMPOSE) up -d

stop: ## Arr√™te tous les services
	@echo "$(RED)‚èπÔ∏è  Arr√™t des services...$(NC)"
	@$(DOCKER_COMPOSE) down

restart: ## Red√©marre tous les services
	@echo "$(YELLOW)üîÑ Red√©marrage des services...$(NC)"
	@$(DOCKER_COMPOSE) restart

rebuild: ## Reconstruit et red√©marre les conteneurs
	@echo "$(YELLOW)üî® Reconstruction des conteneurs...$(NC)"
	@$(DOCKER_COMPOSE) down
	@$(DOCKER_COMPOSE) build --no-cache
	@$(DOCKER_COMPOSE) up -d

logs: ## Affiche les logs de tous les services
	@$(DOCKER_COMPOSE) logs -f

logs-app: ## Affiche les logs de l'application Laravel
	@$(DOCKER_COMPOSE) logs -f app

logs-nginx: ## Affiche les logs du serveur web
	@$(DOCKER_COMPOSE) logs -f nginx

logs-postgres: ## Affiche les logs de PostgreSQL
	@$(DOCKER_COMPOSE) logs -f postgres

shell: ## Acc√®de au shell du conteneur PHP
	@echo "$(BLUE)üêö Acc√®s au shell...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) /bin/sh

shell-root: ## Acc√®de au shell en tant que root
	@$(DOCKER_COMPOSE) exec --user root app /bin/sh

# Commandes Laravel
migrate: ## Ex√©cute les migrations
	@echo "$(BLUE)üìä Ex√©cution des migrations...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan migrate

migrate-fresh: ## Supprime et recr√©e toutes les tables
	@echo "$(YELLOW)üîÑ Recr√©ation compl√®te de la base...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan migrate:fresh

seed: ## Ex√©cute les seeders
	@echo "$(BLUE)üå± Ajout des donn√©es de test...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan db:seed

fresh: migrate-fresh seed ## Migration fresh + seed

# Tests
test: ## Ex√©cute tous les tests
	@echo "$(BLUE)üß™ Ex√©cution des tests...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan test

test-unit: ## Ex√©cute uniquement les tests unitaires
	@$(DOCKER_COMPOSE_EXEC) php artisan test --testsuite=Unit

test-feature: ## Ex√©cute uniquement les tests fonctionnels
	@$(DOCKER_COMPOSE_EXEC) php artisan test --testsuite=Feature

test-coverage: ## Ex√©cute les tests avec couverture de code
	@$(DOCKER_COMPOSE_EXEC) php artisan test --coverage-html coverage

# Qualit√© de code
lint: ## V√©rifie le style de code avec PHP CS Fixer
	@echo "$(BLUE)üîç V√©rification du style de code...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) vendor/bin/php-cs-fixer fix --dry-run --diff

lint-fix: ## Corrige automatiquement le style de code
	@echo "$(YELLOW)üîß Correction du style de code...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) vendor/bin/php-cs-fixer fix

analyze: ## Analyse statique avec PHPStan
	@echo "$(BLUE)üîç Analyse statique du code...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) vendor/bin/phpstan analyse

rector: ## Analyse et suggestions d'am√©lioration avec Rector
	@$(DOCKER_COMPOSE_EXEC) vendor/bin/rector process --dry-run

rector-fix: ## Applique les am√©liorations Rector
	@$(DOCKER_COMPOSE_EXEC) vendor/bin/rector process

# Cache et optimisations
cache-clear: ## Vide tous les caches
	@echo "$(YELLOW)üßπ Vidage des caches...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan cache:clear
	@$(DOCKER_COMPOSE_EXEC) php artisan config:clear
	@$(DOCKER_COMPOSE_EXEC) php artisan route:clear
	@$(DOCKER_COMPOSE_EXEC) php artisan view:clear

cache-warm: ## Pr√©chauffe les caches
	@echo "$(GREEN)‚ö° Pr√©chauffage des caches...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan config:cache
	@$(DOCKER_COMPOSE_EXEC) php artisan route:cache
	@$(DOCKER_COMPOSE_EXEC) php artisan view:cache

optimize: cache-clear cache-warm ## Optimise l'application (clear + warm cache)

# Base de donn√©es
db-reset: ## Remet √† z√©ro la base de donn√©es
	@echo "$(RED)‚ö†Ô∏è  Remise √† z√©ro de la base de donn√©es...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan migrate:fresh --seed

db-backup: ## Sauvegarde la base de donn√©es
	@echo "$(BLUE)üíæ Sauvegarde de la base de donn√©es...$(NC)"
	@docker exec facturx_postgres pg_dump -U facturx facturx > backup_$(shell date +%Y%m%d_%H%M%S).sql

# Frontend
npm-install: ## Installe les d√©pendances Node.js
	@echo "$(BLUE)üì¶ Installation des d√©pendances frontend...$(NC)"
	@$(DOCKER_COMPOSE) exec node npm install

npm-dev: ## Lance le serveur de d√©veloppement Vite
	@echo "$(GREEN)üé® D√©marrage du serveur de d√©veloppement...$(NC)"
	@$(DOCKER_COMPOSE) exec node npm run dev

npm-build: ## Compile les assets pour la production
	@echo "$(BLUE)üî® Compilation des assets...$(NC)"
	@$(DOCKER_COMPOSE) exec node npm run build

npm-watch: ## Lance la compilation en mode watch
	@$(DOCKER_COMPOSE) exec node npm run watch

# Facturation √©lectronique
ppf-connect: ## Teste la connexion au PPF
	@echo "$(BLUE)üîó Test de connexion au PPF...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan facturx:ppf:test

pdp-setup: ## Configure la connexion √† une PDP
	@echo "$(BLUE)‚öôÔ∏è  Configuration PDP...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan facturx:pdp:setup

invoice-test: ## Teste la g√©n√©ration d'une facture √©lectronique
	@echo "$(BLUE)üìÑ Test de g√©n√©ration de facture...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan facturx:invoice:test

# Production
prod-build: ## Construit l'image de production
	@echo "$(GREEN)üèóÔ∏è  Construction de l'image de production...$(NC)"
	@docker build --target production -t facturx:latest .

prod-deploy: ## D√©ploie en production
	@echo "$(RED)üöÄ D√©ploiement en production...$(NC)"
	@./scripts/deploy.sh production

# Monitoring et maintenance
health-check: ## V√©rifie l'√©tat de l'application
	@echo "$(BLUE)üíä V√©rification de l'√©tat...$(NC)"
	@curl -f http://localhost:8000/health || echo "$(RED)‚ùå Service indisponible$(NC)"

queue-status: ## Affiche le statut des queues
	@$(DOCKER_COMPOSE_EXEC) php artisan queue:monitor

queue-restart: ## Red√©marre les workers de queue
	@$(DOCKER_COMPOSE_EXEC) php artisan queue:restart

horizon-status: ## Affiche le statut d'Horizon
	@$(DOCKER_COMPOSE_EXEC) php artisan horizon:status

# S√©curit√©
security-check: ## V√©rifie les vuln√©rabilit√©s de s√©curit√©
	@echo "$(BLUE)üõ°Ô∏è  V√©rification de s√©curit√©...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) composer audit

permissions-fix: ## Corrige les permissions des fichiers
	@echo "$(YELLOW)üîí Correction des permissions...$(NC)"
	@$(DOCKER_COMPOSE) exec --user root app chown -R laravel:laravel /var/www
	@$(DOCKER_COMPOSE) exec --user root app chmod -R 755 /var/www/storage /var/www/bootstrap/cache

# Documentation
docs-build: ## G√©n√®re la documentation de l'API
	@echo "$(BLUE)üìö G√©n√©ration de la documentation...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan l5-swagger:generate

docs-serve: ## Lance le serveur de documentation
	@echo "$(GREEN)üìñ Documentation disponible sur http://localhost:8000/docs$(NC)"

# Utilitaires
clean: ## Nettoie les fichiers temporaires
	@echo "$(YELLOW)üßπ Nettoyage...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) rm -rf storage/logs/*.log
	@$(DOCKER_COMPOSE_EXEC) rm -rf storage/framework/cache/data/*
	@$(DOCKER_COMPOSE_EXEC) rm -rf storage/framework/sessions/*
	@$(DOCKER_COMPOSE_EXEC) rm -rf storage/framework/views/*

logs-clean: ## Nettoie les fichiers de logs
	@echo "$(YELLOW)üóëÔ∏è  Nettoyage des logs...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) find storage/logs -name "*.log" -type f -delete

update: ## Met √† jour les d√©pendances
	@echo "$(BLUE)üì¶ Mise √† jour des d√©pendances...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) composer update
	@$(DOCKER_COMPOSE) exec node npm update

backup: db-backup ## Sauvegarde compl√®te

status: ## Affiche le statut des services
	@echo "$(BLUE)üìä Statut des services:$(NC)"
	@$(DOCKER_COMPOSE) ps

# D√©veloppement sp√©cifique FacturX
facturx-setup: ## Configuration sp√©cifique FacturX
	@echo "$(GREEN)‚öôÔ∏è  Configuration FacturX...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan facturx:install
	@$(DOCKER_COMPOSE_EXEC) php artisan facturx:config:validate

demo-data: ## Charge les donn√©es de d√©monstration
	@echo "$(BLUE)üé≠ Chargement des donn√©es de d√©mo...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan db:seed --class=DemoDataSeeder

compliance-check: ## V√©rifie la conformit√© r√©glementaire
	@echo "$(BLUE)‚öñÔ∏è  V√©rification de conformit√©...$(NC)"
	@$(DOCKER_COMPOSE_EXEC) php artisan facturx:compliance:check

# Aide contextuelle
laravel-help: ## Affiche l'aide Laravel
	@$(DOCKER_COMPOSE_EXEC) php artisan list

composer-help: ## Affiche l'aide Composer
	@$(DOCKER_COMPOSE_EXEC) composer --help

# Raccourcis pratiques
dev: start npm-dev ## Lance l'environnement de d√©veloppement complet
build: npm-build optimize ## Construit l'application pour la production
ci: test lint analyze ## Ex√©cute tous les contr√¥les de qualit√©
deploy: prod-build prod-deploy ## Processus de d√©ploiement complet
