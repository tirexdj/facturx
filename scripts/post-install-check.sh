#!/bin/bash

# Script de v√©rification post-installation FacturX
# V√©rifie que tous les composants sont correctement configur√©s

set -e

echo "üîç V√©rification post-installation FacturX"
echo "========================================"

# Variables
NAMESPACE=${1:-facturx}
ENVIRONMENT=${2:-production}

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
check_success() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
    else
        echo -e "${RED}‚ùå $1${NC}"
        exit 1
    fi
}

check_warning() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    fi
}

echo -e "${BLUE}üîß V√©rification de l'environnement Kubernetes${NC}"

# V√©rifier que kubectl est install√© et configur√©
kubectl version --client > /dev/null 2>&1
check_success "kubectl est install√© et configur√©"

# V√©rifier l'acc√®s au cluster
kubectl cluster-info > /dev/null 2>&1
check_success "Acc√®s au cluster Kubernetes"

# V√©rifier que le namespace existe
kubectl get namespace $NAMESPACE > /dev/null 2>&1
check_success "Namespace '$NAMESPACE' existe"

echo ""
echo -e "${BLUE}üê≥ V√©rification des d√©ploiements${NC}"

# V√©rifier que tous les d√©ploiements sont pr√™ts
DEPLOYMENTS=("facturx-app" "facturx-nginx" "facturx-queue-worker")

for deployment in "${DEPLOYMENTS[@]}"; do
    kubectl get deployment $deployment -n $NAMESPACE > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        READY=$(kubectl get deployment $deployment -n $NAMESPACE -o jsonpath='{.status.readyReplicas}')
        DESIRED=$(kubectl get deployment $deployment -n $NAMESPACE -o jsonpath='{.spec.replicas}')
        
        if [ "$READY" = "$DESIRED" ]; then
            echo -e "${GREEN}‚úÖ D√©ploiement $deployment ($READY/$DESIRED pods pr√™ts)${NC}"
        else
            echo -e "${RED}‚ùå D√©ploiement $deployment ($READY/$DESIRED pods pr√™ts)${NC}"
        fi
    else
        echo -e "${RED}‚ùå D√©ploiement $deployment non trouv√©${NC}"
    fi
done

echo ""
echo -e "${BLUE}üîå V√©rification des services${NC}"

# V√©rifier les services
SERVICES=("facturx-app-service" "facturx-nginx-service")

for service in "${SERVICES[@]}"; do
    kubectl get service $service -n $NAMESPACE > /dev/null 2>&1
    check_success "Service $service existe"
done

echo ""
echo -e "${BLUE}üåê V√©rification de l'Ingress${NC}"

# V√©rifier l'ingress
kubectl get ingress facturx-ingress -n $NAMESPACE > /dev/null 2>&1
check_success "Ingress facturx-ingress existe"

# V√©rifier que l'adresse IP est assign√©e
INGRESS_IP=$(kubectl get ingress facturx-ingress -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
if [ -n "$INGRESS_IP" ]; then
    echo -e "${GREEN}‚úÖ Ingress a une adresse IP: $INGRESS_IP${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Ingress n'a pas encore d'adresse IP assign√©e${NC}"
fi

echo ""
echo -e "${BLUE}üîê V√©rification des secrets${NC}"

# V√©rifier les secrets
kubectl get secret facturx-secrets -n $NAMESPACE > /dev/null 2>&1
check_success "Secret facturx-secrets existe"

# V√©rifier les certificats TLS
kubectl get secret facturx-tls -n $NAMESPACE > /dev/null 2>&1
check_warning "Certificat TLS facturx-tls existe"

echo ""
echo -e "${BLUE}üì¶ V√©rification des ConfigMaps${NC}"

# V√©rifier les ConfigMaps
kubectl get configmap facturx-config -n $NAMESPACE > /dev/null 2>&1
check_success "ConfigMap facturx-config existe"

kubectl get configmap nginx-config -n $NAMESPACE > /dev/null 2>&1
check_success "ConfigMap nginx-config existe"

echo ""
echo -e "${BLUE}üíæ V√©rification du stockage${NC}"

# V√©rifier les PVC
kubectl get pvc facturx-storage-pvc -n $NAMESPACE > /dev/null 2>&1
check_success "PVC facturx-storage-pvc existe"

# V√©rifier le statut du PVC
PVC_STATUS=$(kubectl get pvc facturx-storage-pvc -n $NAMESPACE -o jsonpath='{.status.phase}')
if [ "$PVC_STATUS" = "Bound" ]; then
    echo -e "${GREEN}‚úÖ PVC est li√© (Bound)${NC}"
else
    echo -e "${RED}‚ùå PVC n'est pas li√© (statut: $PVC_STATUS)${NC}"
fi

echo ""
echo -e "${BLUE}üóÑÔ∏è  V√©rification des bases de donn√©es${NC}"

# Tester la connexion √† PostgreSQL
echo "Test de connexion √† PostgreSQL..."
kubectl exec -it deployment/facturx-app -n $NAMESPACE -- php artisan tinker --execute="DB::connection()->getPdo(); echo 'OK';" > /dev/null 2>&1
check_success "Connexion PostgreSQL"

# Tester la connexion √† Redis
echo "Test de connexion √† Redis..."
kubectl exec -it deployment/facturx-app -n $NAMESPACE -- php artisan tinker --execute="Cache::store('redis')->put('test', 'ok'); echo Cache::store('redis')->get('test');" > /dev/null 2>&1
check_success "Connexion Redis"

echo ""
echo -e "${BLUE}üöÄ V√©rification de l'application${NC}"

# V√©rifier que l'application r√©pond
APP_POD=$(kubectl get pods -n $NAMESPACE -l app=facturx-app -o jsonpath='{.items[0].metadata.name}')
if [ -n "$APP_POD" ]; then
    echo "Test du health check de l'application..."
    kubectl exec $APP_POD -n $NAMESPACE -- curl -f http://localhost/health > /dev/null 2>&1
    check_success "Health check de l'application"
    
    echo "V√©rification des migrations..."
    kubectl exec $APP_POD -n $NAMESPACE -- php artisan migrate:status > /dev/null 2>&1
    check_success "√âtat des migrations"
    
    echo "V√©rification de la configuration..."
    kubectl exec $APP_POD -n $NAMESPACE -- php artisan config:show > /dev/null 2>&1
    check_success "Configuration de l'application"
else
    echo -e "${RED}‚ùå Aucun pod d'application trouv√©${NC}"
fi

echo ""
echo -e "${BLUE}‚öôÔ∏è  V√©rification des workers${NC}"

# V√©rifier les workers de queue
WORKER_POD=$(kubectl get pods -n $NAMESPACE -l app=facturx-queue-worker -o jsonpath='{.items[0].metadata.name}')
if [ -n "$WORKER_POD" ]; then
    echo "V√©rification du statut des workers..."
    kubectl exec $WORKER_POD -n $NAMESPACE -- php artisan queue:monitor > /dev/null 2>&1
    check_warning "Workers de queue actifs"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aucun worker de queue trouv√©${NC}"
fi

echo ""
echo -e "${BLUE}üìà V√©rification du scaling${NC}"

# V√©rifier l'HPA
kubectl get hpa facturx-app-hpa -n $NAMESPACE > /dev/null 2>&1
check_warning "HPA (Horizontal Pod Autoscaler) configur√©"

if [ $? -eq 0 ]; then
    HPA_STATUS=$(kubectl get hpa facturx-app-hpa -n $NAMESPACE -o jsonpath='{.status.conditions[0].type}')
    if [ "$HPA_STATUS" = "ScalingActive" ]; then
        echo -e "${GREEN}‚úÖ HPA est actif${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  HPA n'est pas encore actif${NC}"
    fi
fi

echo ""
echo -e "${BLUE}üîí V√©rification de la s√©curit√©${NC}"

# V√©rifier les NetworkPolicies
kubectl get networkpolicy facturx-network-policy -n $NAMESPACE > /dev/null 2>&1
check_warning "NetworkPolicy configur√©e"

# V√©rifier les SecurityContexts
POD_SECURITY=$(kubectl get pods -n $NAMESPACE -l app=facturx-app -o jsonpath='{.items[0].spec.securityContext.runAsNonRoot}')
if [ "$POD_SECURITY" = "true" ]; then
    echo -e "${GREEN}‚úÖ SecurityContext configur√© (runAsNonRoot)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  SecurityContext pourrait √™tre am√©lior√©${NC}"
fi

echo ""
echo -e "${BLUE}üåç Test d'acc√®s externe${NC}"

# Obtenir l'URL d'acc√®s
INGRESS_HOST=$(kubectl get ingress facturx-ingress -n $NAMESPACE -o jsonpath='{.spec.rules[0].host}')
if [ -n "$INGRESS_HOST" ]; then
    echo "Test d'acc√®s externe sur https://$INGRESS_HOST..."
    curl -f -s -k "https://$INGRESS_HOST/health" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Application accessible via https://$INGRESS_HOST${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Application non accessible via HTTPS (normal si certificats en cours)${NC}"
        
        # Test en HTTP
        curl -f -s "http://$INGRESS_HOST/health" > /dev/null 2>&1
        check_warning "Application accessible via HTTP"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Pas de host configur√© dans l'Ingress${NC}"
fi

echo ""
echo -e "${BLUE}üìã R√©sum√© de l'installation${NC}"
echo "================================="
echo -e "Namespace: ${YELLOW}$NAMESPACE${NC}"
echo -e "Environnement: ${YELLOW}$ENVIRONMENT${NC}"

if [ -n "$INGRESS_HOST" ]; then
    echo -e "URL d'acc√®s: ${YELLOW}https://$INGRESS_HOST${NC}"
fi

echo ""
echo -e "${GREEN}üéâ V√©rification termin√©e !${NC}"
echo ""
echo "Prochaines √©tapes :"
echo "1. V√©rifier que les certificats SSL sont bien configur√©s"
echo "2. Tester les fonctionnalit√©s principales de l'application"
echo "3. Configurer la surveillance et les alertes"
echo "4. Planifier les sauvegardes r√©guli√®res"
echo ""
echo "Pour plus d'informations, consultez DEPLOYMENT.md"
